<?php

namespace ApiBundle\Repository;
use Doctrine\ORM\EntityRepository;
use ApiBundle\Entity\Personnel;

/**
 * PersonnelRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonnelRepository extends EntityRepository
{

  public function findActivePersonnelBySalon($idSalon) {

    $this->getEntityManager()->getRepository('ApiBundle:PersonnelHasSalon')->findActivePersonnel();


    return $this->createQueryBuilder('p')
          ->join('p.salon', 'm')
          ->where('m.sage = :idSalon')
          ->setParameter('idSalon', $idSalon)
          ->Andwhere('p.actif = 1');
  }

    public function getNb($idPerso,$idSalon) {
          $nb = $this->createQueryBuilder('d')
              ->select('COUNT(d)')
              ->join('d.salon', 'm')
              ->where('d.matricule = :idPerso')
              ->andwhere('m.sage = :idSalon')
              ->setParameter('idPerso',$idPerso)
              ->setParameter('idSalon',$idSalon)
              ->getQuery()
              ->getResult();

            return $nb[0][1];
      }


   // Fonction whichPersonnel: Retourne la liste du personnel en fonction d'un salon pour la partie ADMIN
    public function getPerso($listeAccount,$idSalon){
      $repository = $this->getEntityManager()->getRepository('ApiBundle:PersonnelHasSalon');
        $listPerso=[];
        if ($listeAccount == null) {
            $listPerso['Aucun utilisateur disponible']= null ;
        }else{
        foreach ($listeAccount as $key => $value) {
                if ( (self::getNb($value,$idSalon) > 0) && ($repository->ifCoiffeur($value) )){
                     $p = $this->findOneBy(array('matricule' => $value));
                     $listPerso[$p->getNom().' '.$p->getPrenom()] = $value;
            }
         }
            if(empty($listPerso)){
              $listPerso['Aucun utilisateur disponible']= null ;
            }
        return $listPerso;
     }
   }

   // Fonction whichPersonnel: Retourne les infos du personnel pour chaque demande dans partie Suivi des Demandes
   public function whichPersonnel($demande, $idP){

          $collab = $this->findOneBy(array('matricule' => $idP ));
          $collab = $collab->getNom() . " " . $collab->getPrenom();

      return $collab;
   }

   // Fonction getListPerso: Retourne la liste du personnel avec la possibilité de n'effectuer aucune sélection
   //en premier lieu

   public function getListPerso($idSalon){
      $listPerso['Aucune sélection'] = null;
      $listPerso[null] = null;
      // $p = $this->findOneBy(array('matricule' => $value));
      // $listPerso[$p->getNom().' '.$p->getPrenom()] = $value;

      $listes= $this->createQueryBuilder('d')
          ->join('d.salon', 'm')
          ->andwhere('m.sage = :idSalon')
          ->setParameter('idSalon',$idSalon)
          ->getQuery()
          ->getResult();

    foreach ($listes as $liste) {
                 $listPerso[$liste->getNom().' '.$liste->getPrenom()] = $liste->getMatricule();
              }
   return $listPerso;
 }

 // Fonction getListCollab: Retourne la liste du personnel n'ayant pas encore de compte utilisateur
 // ADMIN
 public function getListCollab($idSalon){

     $collabs = $this->createQueryBuilder('d')
         ->join('d.salon', 'm')
         ->andwhere('m.sage = :idSalon')
         ->setParameter('idSalon',$idSalon)
         ->getQuery()
         ->getResult();

     $listeAccount=[];
     foreach ($collabs as $collab) {

              $matricule = $collab->getMatricule();
               $p = $repository->findOneBy(array('matricule' => $matricule));

               if(!empty($p)){
                 $listeAccount[]= $matricule;
               }

            }
      return $listeAccount;
  }
}
